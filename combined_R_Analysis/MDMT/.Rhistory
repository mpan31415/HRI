legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ auto_grouped, ) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
p
# ggexport(p, filename = "pdfs/tlx.pdf")
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "per_auto",
color = "auto_grouped", palette = "jco"
)
bxp1
######################### check for outliers #########################
data_df %>%
group_by(autonomy, noisy_robot) %>%
identify_outliers(per_auto)
######################### check normality #########################
ggqqplot(data_df, "per_auto", ggtheme = theme_bw()) + facet_grid(autonomy ~ noisy_robot)
######################### check variance homogeneity #########################
data_df %>%
group_by(autonomy) %>%
levene_test(per_auto ~ noisy_robot)
######################### check covariance homogeneity #########################
box_m(data_df[, "per_auto", drop = FALSE], data_df$noisy_robot)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = data_df, dv = per_auto, wid = pid, between = noisy_robot, within = autonomy)
anova_per_auto <- get_anova_table(res.aov)
anova_per_auto
# ######################### SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# pwc <- data_df %>%
#   group_by(autonomy) %>%
#   pairwise_t_test(per_auto ~ noisy_robot, p.adjust.method = "bonferroni")
# pwc
#
# ######################### NON-SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
data_df %>%
pairwise_t_test(
per_auto ~ autonomy, paired = TRUE,
p.adjust.method = "bonferroni"
)
data_df %>%
pairwise_t_test(
per_auto ~ noisy_robot,
p.adjust.method = "bonferroni"
)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/HRI/studies_combined/")
data_df <- read_csv("combined_data.csv")
######################### get mean and sd (or se) #########################
data_df %>%
group_by(autonomy, noisy_robot) %>%
get_summary_stats(single_trust, type = "mean_sd")
# ######################### cool box plot (courtesy of Sarah) #########################
# ggplot(data_df,aes(x=order,y=single_trust, fill=order))+geom_boxplot(aes(fill=order)) + labs( x = "Order", y = "single_trust", fill = "Order") +   theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
#
#
# ######################### cool dot plot #########################
# ggplot(data_df,aes(x=order,y=single_trust, fill=order)) + geom_boxplot() + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=1.2) +
#                     labs( x = "Order", y = "single_trust", fill = "Order") + theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
## define custom median function
plot.median <- function(x) {
m <- median(x)
c(y = m, ymin = m, ymax = m)
}
## define custom mean function
plot.median <- function(x) {
m <- mean(x)
c(y = m, ymin = m, ymax = m)
}
######################### cool dot plot 2 #########################
p <- ggplot(data_df,aes(x=noisy_robot,y=single_trust, fill=noisy_robot)) + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=0.6) +
labs( x = "Noisy Robot", y = "Perceived Autonomy", fill = "Noisy Robot") + theme_minimal() +
stat_summary(fun.y = mean, geom="crossbar", colour="red", width=0.5, size=0.5) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 18),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ auto_grouped, ) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
p
# ggexport(p, filename = "pdfs/tlx.pdf")
# ######################### cool box plot (courtesy of Sarah) #########################
# ggplot(data_df,aes(x=order,y=single_trust, fill=order))+geom_boxplot(aes(fill=order)) + labs( x = "Order", y = "single_trust", fill = "Order") +   theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
#
#
# ######################### cool dot plot #########################
# ggplot(data_df,aes(x=order,y=single_trust, fill=order)) + geom_boxplot() + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=1.2) +
#                     labs( x = "Order", y = "single_trust", fill = "Order") + theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
## define custom median function
plot.median <- function(x) {
m <- median(x)
c(y = m, ymin = m, ymax = m)
}
## define custom mean function
plot.median <- function(x) {
m <- mean(x)
c(y = m, ymin = m, ymax = m)
}
######################### cool dot plot 2 #########################
p <- ggplot(data_df,aes(x=noisy_robot,y=single_trust, fill=noisy_robot)) + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=0.6) +
labs( x = "Noisy Robot", y = "Single-Scale Trust", fill = "Noisy Robot") + theme_minimal() +
stat_summary(fun.y = mean, geom="crossbar", colour="red", width=0.5, size=0.5) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 18),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ auto_grouped, ) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
p
# ggexport(p, filename = "pdfs/tlx.pdf")
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "single_trust",
color = "auto_grouped", palette = "jco"
)
bxp1
######################### check for outliers #########################
data_df %>%
group_by(autonomy, noisy_robot) %>%
identify_outliers(single_trust)
######################### check normality #########################
ggqqplot(data_df, "single_trust", ggtheme = theme_bw()) + facet_grid(autonomy ~ noisy_robot)
######################### check variance homogeneity #########################
data_df %>%
group_by(autonomy) %>%
levene_test(single_trust ~ noisy_robot)
######################### check covariance homogeneity #########################
box_m(data_df[, "single_trust", drop = FALSE], data_df$noisy_robot)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = data_df, dv = single_trust, wid = pid, between = noisy_robot, within = autonomy)
anova_single_trust <- get_anova_table(res.aov)
anova_single_trust
# ######################### SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# pwc <- data_df %>%
#   group_by(autonomy) %>%
#   pairwise_t_test(single_trust ~ noisy_robot, p.adjust.method = "bonferroni")
# pwc
#
# ######################### NON-SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
data_df %>%
pairwise_t_test(
single_trust ~ autonomy, paired = TRUE,
p.adjust.method = "bonferroni"
)
data_df %>%
pairwise_t_test(
single_trust ~ noisy_robot,
p.adjust.method = "bonferroni"
)
View(data_df)
View(data_df)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/HRI/studies_combined/")
data_df <- read_csv("combined_data.csv")
######################### get mean and sd (or se) #########################
data_df %>%
group_by(autonomy, noisy_robot) %>%
get_summary_stats(overall_traj_err, type = "mean_sd")
# ######################### cool box plot (courtesy of Sarah) #########################
# ggplot(data_df,aes(x=order,y=overall_traj_err, fill=order))+geom_boxplot(aes(fill=order)) + labs( x = "Order", y = "overall_traj_err", fill = "Order") +   theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
#
#
# ######################### cool dot plot #########################
# ggplot(data_df,aes(x=order,y=overall_traj_err, fill=order)) + geom_boxplot() + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=1.2) +
#                     labs( x = "Order", y = "overall_traj_err", fill = "Order") + theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
## define custom median function
plot.median <- function(x) {
m <- median(x)
c(y = m, ymin = m, ymax = m)
}
## define custom mean function
plot.median <- function(x) {
m <- mean(x)
c(y = m, ymin = m, ymax = m)
}
######################### cool dot plot 2 #########################
p <- ggplot(data_df,aes(x=noisy_robot,y=overall_traj_err, fill=noisy_robot)) + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=0.6) +
labs( x = "Noisy Robot", y = "Single-Scale Trust", fill = "Noisy Robot") + theme_minimal() +
stat_summary(fun.y = mean, geom="crossbar", colour="red", width=0.5, size=0.5) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 18),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ auto_grouped, ) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
p
# ggexport(p, filename = "pdfs/tlx.pdf")
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "overall_traj_err",
color = "auto_grouped", palette = "jco"
)
bxp1
######################### check for outliers #########################
data_df %>%
group_by(autonomy, noisy_robot) %>%
identify_outliers(overall_traj_err)
######################### check normality #########################
ggqqplot(data_df, "overall_traj_err", ggtheme = theme_bw()) + facet_grid(autonomy ~ noisy_robot)
######################### check variance homogeneity #########################
data_df %>%
group_by(autonomy) %>%
levene_test(overall_traj_err ~ noisy_robot)
######################### check covariance homogeneity #########################
box_m(data_df[, "overall_traj_err", drop = FALSE], data_df$noisy_robot)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = data_df, dv = overall_traj_err, wid = pid, between = noisy_robot, within = autonomy)
anova_overall_traj_err <- get_anova_table(res.aov)
anova_overall_traj_err
# ######################### SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# pwc <- data_df %>%
#   group_by(autonomy) %>%
#   pairwise_t_test(overall_traj_err ~ noisy_robot, p.adjust.method = "bonferroni")
# pwc
#
# ######################### NON-SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
data_df %>%
pairwise_t_test(
overall_traj_err ~ autonomy, paired = TRUE,
p.adjust.method = "bonferroni"
)
data_df %>%
pairwise_t_test(
overall_traj_err ~ noisy_robot,
p.adjust.method = "bonferroni"
)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/HRI/studies_combined/")
data_df <- read_csv("combined_data.csv")
######################### get mean and sd (or se) #########################
data_df %>%
group_by(autonomy, noisy_robot) %>%
get_summary_stats(left_index, type = "mean_sd")
data_df %>%
group_by(autonomy, noisy_robot) %>%
get_summary_stats(right_index, type = "mean_sd")
data_df %>%
group_by(autonomy, noisy_robot) %>%
get_summary_stats(pupil_index, type = "mean_sd")
######################### cool box plot (courtesy of Sarah) #########################
ggplot(data_df,aes(x=noisy_robot,y=left_index, fill=noisy_robot))+geom_boxplot(aes(fill=noisy_robot)) + labs( x = "noisy_robot", y = "left_index", fill = "noisy_robot") +   theme_minimal() +
# stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ autonomy) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
######################### cool box plot (courtesy of Sarah) #########################
ggplot(data_df,aes(x=noisy_robot,y=right_index, fill=noisy_robot))+geom_boxplot(aes(fill=noisy_robot)) + labs( x = "noisy_robot", y = "right_index", fill = "noisy_robot") +   theme_minimal() +
# stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ autonomy) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
######################### cool box plot (courtesy of Sarah) #########################
ggplot(data_df,aes(x=noisy_robot,y=pupil_index, fill=noisy_robot))+geom_boxplot(aes(fill=noisy_robot)) + labs( x = "noisy_robot", y = "Pupil Diameter", fill = "noisy_robot") +   theme_minimal() +
# stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ autonomy) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "pupil_index",
color = "auto_grouped", palette = "jco"
)
bxp1
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/HRI/studies_combined/")
data_df <- read_csv("combined_data.csv")
######################### get mean and sd (or se) #########################
data_df %>%
group_by(autonomy, noisy_robot) %>%
get_summary_stats(tapping_err_short, type = "mean_sd")
data_df %>%
group_by(autonomy, noisy_robot) %>%
get_summary_stats(tapping_err_long, type = "mean_sd")
data_df %>%
group_by(autonomy, noisy_robot) %>%
get_summary_stats(tapping_err_ave, type = "mean_sd")
######################### cool box plot (courtesy of Sarah) #########################
ggplot(data_df,aes(x=noisy_robot,y=tapping_err_short, fill=noisy_robot))+geom_boxplot(aes(fill=noisy_robot)) + labs( x = "noisy_robot", y = "tapping_err_short", fill = "noisy_robot") +   theme_minimal() +
# stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ autonomy) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
######################### cool box plot (courtesy of Sarah) #########################
ggplot(data_df,aes(x=noisy_robot,y=tapping_err_long, fill=noisy_robot))+geom_boxplot(aes(fill=noisy_robot)) + labs( x = "noisy_robot", y = "tapping_err_long", fill = "noisy_robot") +   theme_minimal() +
# stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ autonomy) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
######################### cool box plot (courtesy of Sarah) #########################
ggplot(data_df,aes(x=noisy_robot,y=tapping_err_ave, fill=noisy_robot))+geom_boxplot(aes(fill=noisy_robot)) + labs( x = "noisy_robot", y = "tapping_err_ave", fill = "noisy_robot") +   theme_minimal() +
# stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
scale_fill_brewer(palette = "Set2") +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.position= "none") +
facet_grid(. ~ autonomy) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "left_index",
color = "auto_grouped", palette = "jco"
)
bxp1
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "right_index",
color = "auto_grouped", palette = "jco"
)
bxp1
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "pupil_index",
color = "auto_grouped", palette = "jco"
)
bxp1
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "tapping_err_short",
color = "auto_grouped", palette = "jco"
)
bxp1
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "tapping_err_long",
color = "auto_grouped", palette = "jco"
)
bxp1
bxp1 <- ggboxplot(
data_df, x = "noisy_robot", y = "tapping_err_ave",
color = "auto_grouped", palette = "jco"
)
bxp1
######################### check for outliers #########################
data_df %>%
group_by(autonomy, noisy_robot) %>%
identify_outliers(tapping_err_short)
data_df %>%
group_by(autonomy, noisy_robot) %>%
identify_outliers(tapping_err_long)
data_df %>%
group_by(autonomy, noisy_robot) %>%
identify_outliers(tapping_err_ave)
######################### check normality #########################
ggqqplot(data_df, "tapping_err_short", ggtheme = theme_bw()) + facet_grid(autonomy ~ noisy_robot)
ggqqplot(data_df, "tapping_err_long", ggtheme = theme_bw()) + facet_grid(autonomy ~ noisy_robot)
ggqqplot(data_df, "tapping_err_ave", ggtheme = theme_bw()) + facet_grid(autonomy ~ noisy_robot)
######################### check variance homogeneity #########################
data_df %>%
group_by(autonomy) %>%
levene_test(tapping_err_short ~ noisy_robot)
data_df %>%
group_by(autonomy) %>%
levene_test(tapping_err_long ~ noisy_robot)
data_df %>%
group_by(autonomy) %>%
levene_test(tapping_err_ave ~ noisy_robot)
######################### check covariance homogeneity #########################
box_m(data_df[, "tapping_err_short", drop = FALSE], data_df$noisy_robot)
box_m(data_df[, "tapping_err_long", drop = FALSE], data_df$noisy_robot)
box_m(data_df[, "tapping_err_ave", drop = FALSE], data_df$noisy_robot)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = data_df, dv = tapping_err_short, wid = pid, between = noisy_robot, within = autonomy)
anova_tapping_err_short <- get_anova_table(res.aov)
anova_tapping_err_short
res.aov <- anova_test(data = data_df, dv = tapping_err_long, wid = pid, between = noisy_robot, within = autonomy)
anova_tapping_err_long <- get_anova_table(res.aov)
anova_tapping_err_long
res.aov <- anova_test(data = data_df, dv = tapping_err_ave, wid = pid, between = noisy_robot, within = autonomy)
anova_tapping_err_ave <- get_anova_table(res.aov)
anova_tapping_err_ave
# ######################### SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# pwc <- data_df %>%
#   group_by(autonomy) %>%
#   pairwise_t_test(tapping_err_ave ~ noisy_robot, p.adjust.method = "bonferroni")
# pwc
#
# ######################### NON-SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# data_df %>%
#   pairwise_t_test(
#     tapping_err_ave ~ autonomy, paired = TRUE,
#     p.adjust.method = "bonferroni"
#   )
#
# data_df %>%
#   pairwise_t_test(
#     tapping_err_ave ~ noisy_robot,
#     p.adjust.method = "bonferroni"
#   )
